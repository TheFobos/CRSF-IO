#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ CRSF API
"""

import requests
import json
import time

def test_api():
    base_url = "http://localhost:8080"
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRSF API...")
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
    print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏...")
    try:
        response = requests.get(f"{base_url}/api/telemetry", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–≤—è–∑–∏: {'–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' if data['linkUp'] else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}")
            print(f"üì° –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç: {data['activePort']}")
            print(f"‚è∞ –í—Ä–µ–º—è: {data['timestamp']}")
            print(f"üéÆ –ö–∞–Ω–∞–ª—ã: {data['channels'][:4]}... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 4)")
            print(f"üîã –ë–∞—Ç–∞—Ä–µ—è: {data['battery']['voltage']:.1f}–í, {data['battery']['current']:.0f}–º–ê")
            print(f"‚úàÔ∏è –ü–æ–ª–æ–∂–µ–Ω–∏–µ: Roll={data['attitude']['roll']:.1f}¬∞, Pitch={data['attitude']['pitch']:.1f}¬∞")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return
    
    # –¢–µ—Å—Ç 2: –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞
    try:
        response = requests.get(f"{base_url}/api/command?cmd=setMode&value=manual", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: manual")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–∂–∏–º–∞: {e}")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–∞
    try:
        response = requests.get(f"{base_url}/api/command?cmd=setChannel&value=1=1500", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –ö–∞–Ω–∞–ª 1 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 1500")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∫–∞–Ω–∞–ª–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    print("\n3Ô∏è‚É£ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (5 —Å–µ–∫—É–Ω–¥)...")
    for i in range(5):
        try:
            response = requests.get(f"{base_url}/api/telemetry", timeout=2)
            if response.status_code == 200:
                data = response.json()
                print(f"‚è±Ô∏è {data['timestamp']} - –ö–∞–Ω–∞–ª—ã: {data['channels'][0]}, {data['channels'][1]}, {data['channels'][2]}, {data['channels'][3]}")
            time.sleep(1)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            break
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_api()
