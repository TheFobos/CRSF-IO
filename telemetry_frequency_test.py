#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ CRSF
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö attitude, battery, flight_mode –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import requests
import time
import json
from datetime import datetime
import statistics

class TelemetryFrequencyAnalyzer:
    def __init__(self, api_url="http://localhost:8081/api/telemetry"):
        self.api_url = api_url
        self.last_data = None
        self.changes_log = []
        self.start_time = None
        
    def get_telemetry_data(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            response = requests.get(self.api_url, timeout=1)
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                return None
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
    
    def has_data_changed(self, current_data, last_data):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏"""
        if last_data is None:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ attitude
        current_attitude = current_data.get('attitude', {})
        last_attitude = last_data.get('attitude', {})
        
        attitude_changed = (
            abs(current_attitude.get('roll', 0) - last_attitude.get('roll', 0)) > 0.1 or
            abs(current_attitude.get('pitch', 0) - last_attitude.get('pitch', 0)) > 0.1 or
            abs(current_attitude.get('yaw', 0) - last_attitude.get('yaw', 0)) > 0.1
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ battery
        current_battery = current_data.get('battery', {})
        last_battery = last_data.get('battery', {})
        
        battery_changed = (
            abs(current_battery.get('voltage', 0) - last_battery.get('voltage', 0)) > 0.01 or
            abs(current_battery.get('current', 0) - last_battery.get('current', 0)) > 1.0 or
            current_battery.get('remaining', 0) != last_battery.get('remaining', 0)
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ flight_mode
        flight_mode_changed = (
            current_data.get('workMode', '') != last_data.get('workMode', '')
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–∞—Ö
        current_channels = current_data.get('channels', [])
        last_channels = last_data.get('channels', [])
        
        channels_changed = False
        if len(current_channels) == len(last_channels):
            for i in range(min(len(current_channels), 4)):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 4 –∫–∞–Ω–∞–ª–∞
                if abs(current_channels[i] - last_channels[i]) > 5:  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 5 –º–∫—Å
                    channels_changed = True
                    break
        
        return attitude_changed or battery_changed or flight_mode_changed or channels_changed
    
    def log_change(self, data_type, old_value, new_value):
        """–ó–∞–ø–∏—Å–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        timestamp = time.time()
        if self.start_time is None:
            self.start_time = timestamp
            
        elapsed = timestamp - self.start_time
        
        change_record = {
            'timestamp': timestamp,
            'elapsed': elapsed,
            'type': data_type,
            'old_value': old_value,
            'new_value': new_value
        }
        
        self.changes_log.append(change_record)
        
        # –í—ã–≤–æ–¥–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        print(f"[{elapsed:6.1f}s] üìä {data_type}: {old_value} ‚Üí {new_value}")
    
    def analyze_frequency(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç–æ—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        if len(self.changes_log) < 2:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
            
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        intervals = []
        for i in range(1, len(self.changes_log)):
            interval = self.changes_log[i]['timestamp'] - self.changes_log[i-1]['timestamp']
            intervals.append(interval)
        
        if not intervals:
            print("‚ùå –ù–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
            
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        avg_interval = statistics.mean(intervals)
        min_interval = min(intervals)
        max_interval = max(intervals)
        median_interval = statistics.median(intervals)
        
        # –ß–∞—Å—Ç–æ—Ç–∞
        avg_frequency = 1.0 / avg_interval if avg_interval > 0 else 0
        max_frequency = 1.0 / min_interval if min_interval > 0 else 0
        
        print("\n" + "="*60)
        print("üìà –ê–ù–ê–õ–ò–ó –ß–ê–°–¢–û–¢–´ –ò–ó–ú–ï–ù–ï–ù–ò–ô –¢–ï–õ–ï–ú–ï–¢–†–ò–ò")
        print("="*60)
        print(f"üìä –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(self.changes_log)}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –∏–∑–º–µ—Ä–µ–Ω–∏—è: {self.changes_log[-1]['elapsed']:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üìà –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {avg_interval*1000:.1f} –º—Å")
        print(f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {min_interval*1000:.1f} –º—Å")
        print(f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {max_interval*1000:.1f} –º—Å")
        print(f"üìä –ú–µ–¥–∏–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {median_interval*1000:.1f} –º—Å")
        print(f"üîÑ –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞: {avg_frequency:.1f} –ì—Ü")
        print(f"‚ö° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: {max_frequency:.1f} –ì—Ü")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö
        type_counts = {}
        for change in self.changes_log:
            data_type = change['type']
            type_counts[data_type] = type_counts.get(data_type, 0) + 1
            
        print(f"\nüìã –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º:")
        for data_type, count in type_counts.items():
            percentage = (count / len(self.changes_log)) * 100
            print(f"   {data_type}: {count} ({percentage:.1f}%)")
    
    def run_test(self, duration_seconds=30):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —á–∞—Å—Ç–æ—Ç—ã —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –Ω–∞ {duration_seconds} —Å–µ–∫—É–Ω–¥")
        print("üì± –î–≤–∏–≥–∞–π—Ç–µ –ø–æ–ª–µ—Ç–Ω–∏–∫–æ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
        print("‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
        
        try:
            start_time = time.time()
            last_check_time = start_time
            
            while time.time() - start_time < duration_seconds:
                current_data = self.get_telemetry_data()
                
                if current_data is None:
                    time.sleep(0.1)
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 10–º—Å (100 –ì—Ü)
                current_time = time.time()
                if current_time - last_check_time >= 0.01:  # 10–º—Å
                    last_check_time = current_time
                    
                    if self.has_data_changed(current_data, self.last_data):
                        # –î–µ—Ç–∞–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                        if self.last_data is not None:
                            # Attitude
                            current_attitude = current_data.get('attitude', {})
                            last_attitude = self.last_data.get('attitude', {})
                            
                            for axis in ['roll', 'pitch', 'yaw']:
                                current_val = current_attitude.get(axis, 0)
                                last_val = last_attitude.get(axis, 0)
                                if abs(current_val - last_val) > 0.1:
                                    self.log_change(f"ATTITUDE_{axis.upper()}", 
                                                   f"{last_val:.2f}¬∞", 
                                                   f"{current_val:.2f}¬∞")
                            
                            # Battery
                            current_battery = current_data.get('battery', {})
                            last_battery = self.last_data.get('battery', {})
                            
                            voltage_change = abs(current_battery.get('voltage', 0) - last_battery.get('voltage', 0))
                            if voltage_change > 0.01:
                                self.log_change("BATTERY_VOLTAGE", 
                                               f"{last_battery.get('voltage', 0):.2f}V", 
                                               f"{current_battery.get('voltage', 0):.2f}V")
                            
                            # Channels
                            current_channels = current_data.get('channels', [])
                            last_channels = self.last_data.get('channels', [])
                            
                            for i in range(min(len(current_channels), 4)):
                                if abs(current_channels[i] - last_channels[i]) > 5:
                                    self.log_change(f"CHANNEL_{i+1}", 
                                                   f"{last_channels[i]}", 
                                                   f"{current_channels[i]}")
                        
                        self.last_data = current_data.copy()
                    else:
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
                        time.sleep(0.001)  # 1–º—Å
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.analyze_frequency()

if __name__ == "__main__":
    analyzer = TelemetryFrequencyAnalyzer()
    
    print("üîß CRSF –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è - –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    test_data = analyzer.get_telemetry_data()
    if test_data is None:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API —Å–µ—Ä–≤–µ—Ä—É")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ crsf_io_rpi –∑–∞–ø—É—â–µ–Ω –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8081")
        exit(1)
    
    print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
    print(f"üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(test_data, indent=2)}")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    analyzer.run_test(duration_seconds=30)
