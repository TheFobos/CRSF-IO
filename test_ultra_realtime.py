#!/usr/bin/env python3
"""
–£–ª—å—Ç—Ä–∞-—Ä–µ–∞–ª—Ç–∞–π–º —Ç–µ—Å—Ç CRSF API
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
"""

import requests
import time
import threading
import queue

def ultra_realtime_test():
    base_url = "http://localhost:8080"
    
    print("üöÄ –£–õ–¨–¢–†–ê-–†–ï–ê–õ–¢–ê–ô–ú –¢–ï–°–¢ CRSF API")
    print("=" * 60)
    
    # –û—á–µ—Ä–µ–¥—å –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    data_queue = queue.Queue()
    stop_flag = threading.Event()
    
    def data_collector():
        """–ü–æ—Ç–æ–∫ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é"""
        request_count = 0
        start_time = time.time()
        
        while not stop_flag.is_set():
            try:
                response = requests.get(f"{base_url}/api/telemetry", timeout=0.5)
                if response.status_code == 200:
                    data = response.json()
                    current_time = time.time()
                    elapsed = (current_time - start_time) * 1000
                    
                    data_queue.put({
                        'timestamp': current_time,
                        'elapsed': elapsed,
                        'request_count': request_count,
                        'data': data
                    })
                    
                    request_count += 1
                else:
                    print(f"‚ùå HTTP {response.status_code}")
                    break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                break
        
        print(f"üìä –°–æ–±—Ä–∞–Ω–æ {request_count} –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    collector_thread = threading.Thread(target=data_collector)
    collector_thread.start()
    
    print("üîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥...")
    time.sleep(3)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–±–æ—Ä
    stop_flag.set()
    collector_thread.join()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = []
    while not data_queue.empty():
        results.append(data_queue.get())
    
    if len(results) > 1:
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        intervals = []
        for i in range(1, len(results)):
            interval = (results[i]['timestamp'] - results[i-1]['timestamp']) * 1000
            intervals.append(interval)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = results[-1]['elapsed'] - results[0]['elapsed']
        requests_per_second = len(results) / (total_time / 1000)
        avg_interval = sum(intervals) / len(intervals)
        min_interval = min(intervals)
        max_interval = max(intervals)
        
        print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–õ–¨–¢–†–ê-–†–ï–ê–õ–¢–ê–ô–ú–ê:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(results)}")
        print(f"   –í—Ä–µ–º—è: {total_time:.1f}–º—Å")
        print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫: {requests_per_second:.1f}")
        print(f"   –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {avg_interval:.1f}–º—Å")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: {min_interval:.1f}–º—Å")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: {max_interval:.1f}–º—Å")
        print(f"   –ß–∞—Å—Ç–æ—Ç–∞: {1000/avg_interval:.1f} –ì—Ü")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        if results:
            last_data = results[-1]['data']
            print(f"\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:")
            print(f"   –í—Ä–µ–º—è: {last_data['timestamp']}")
            print(f"   –ö–∞–Ω–∞–ª—ã: {last_data['channels'][:4]}...")
            print(f"   –ü–æ–ª–æ–∂–µ–Ω–∏–µ: Roll={last_data['attitude']['roll']:.1f}¬∞")
        
        # –û—Ü–µ–Ω–∫–∞
        if requests_per_second >= 15:
            print("üèÜ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –†–ï–ê–õ–¢–ê–ô–ú!")
        elif requests_per_second >= 10:
            print("‚ö° –û–¢–õ–ò–ß–ù–´–ô –†–ï–ê–õ–¢–ê–ô–ú!")
        elif requests_per_second >= 5:
            print("‚úÖ –•–û–†–û–®–ò–ô –†–ï–ê–õ–¢–ê–ô–ú")
        else:
            print("‚ö†Ô∏è  –ù–£–ñ–ù–ê –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø")
    
    print("\nüéØ –£–ª—å—Ç—Ä–∞-—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    ultra_realtime_test()
